#!/usr/bin/env python3
#
# process-reboot-cause
#
# Program designed to read the previous reboot-cause files, log the last previous reboot-cause.
# And read the saved reboot-cause history files and save the reboot cause in the state-db.
#

try:
    import json
    import os
    import pwd
    import sys

    from swsscommon import swsscommon
    from sonic_py_common import syslogger
    from sonic_py_common import device_info
except ImportError as err:
    raise ImportError("%s - required module not found" % str(err))

VERSION = "1.0"
CHASSIS_SERVER_PORT = 6380

SYSLOG_IDENTIFIER = "process-reboot-cause"

REBOOT_CAUSE_DIR = "/host/reboot-cause/"
REBOOT_CAUSE_HISTORY_DIR = "/host/reboot-cause/history/"
PREVIOUS_REBOOT_CAUSE_FILE = os.path.join(REBOOT_CAUSE_DIR, "previous-reboot-cause.json")
USER_ISSUED_REBOOT_CAUSE_REGEX ="User issued \'{}\' command [User: {}, Time: {}]"

REBOOT_CAUSE_UNKNOWN = "Unknown"
REBOOT_CAUSE_TABLE_NAME = "REBOOT_CAUSE"
MAX_HISTORY_FILES = 10

REDIS_HOSTIP = "127.0.0.1"
state_db = None

# Global logger class instance
sonic_logger = syslogger.SysLogger(SYSLOG_IDENTIFIER)


# ============================= Functions =============================
def read_reboot_cause_files_and_save_to_db():
    """Read reboot cause files and save them to the database based on device type."""

    # Connect to the appropriate DB based on whether it's a smart switch or not
    if device_info.is_smartswitch():
        # Connect to chassis state DB for smart switch
        chassis_state_db = swsscommon.SonicV2Connector(host="redis_chassis.server", port=CHASSIS_SERVER_PORT)
        chassis_state_db.connect(chassis_state_db.CHASSIS_STATE_DB)
        dpu_list = device_info.get_dpu_list()
        reboot_files = [os.path.join(REBOOT_CAUSE_HISTORY_DIR, f"{dpu.upper()}_reboot_cause.json") for dpu in dpu_list]
    else:
        # Connect to local state DB for non-smart switch
        state_db = swsscommon.SonicV2Connector(host=REDIS_HOSTIP)
        state_db.connect(state_db.STATE_DB)
        reboot_files = [os.path.join(REBOOT_CAUSE_HISTORY_DIR, f"npu_reboot_cause.json")]

    # Read and process reboot cause files for both cases
    for reboot_file in reboot_files:
        if os.path.isfile(reboot_file):
            with open(reboot_file, "r") as cause_file:
                try:
                    data = json.load(cause_file)

                    # Ensure the necessary keys exist for smart switch
                    if device_info.is_smartswitch():
                        if 'name' not in data:
                            sonic_logger.log_warning(f"Missing 'name' in data from {reboot_file}")
                            continue  # Skip this file
                        for dpu in dpu_list:
                            _hash = f"{REBOOT_CAUSE_TABLE_NAME}|{dpu.upper()}|{data['name']}"
                            chassis_state_db.set(chassis_state_db.CHASSIS_STATE_DB, _hash, 'cause', data.get('cause', ''))
                            chassis_state_db.set(chassis_state_db.CHASSIS_STATE_DB, _hash, 'time', data.get('time', ''))
                            chassis_state_db.set(chassis_state_db.CHASSIS_STATE_DB, _hash, 'user', data.get('user', ''))
                            chassis_state_db.set(chassis_state_db.CHASSIS_STATE_DB, _hash, 'comment', data.get('comment', ''))
                    else:
                        # For non-smart switch, use the regular state DB
                        _hash = f'{REBOOT_CAUSE_TABLE_NAME}|{data["gen_time"]}'
                        state_db.set(state_db.STATE_DB, _hash, 'cause', data.get('cause', ''))
                        state_db.set(state_db.STATE_DB, _hash, 'time', data.get('time', ''))
                        state_db.set(state_db.STATE_DB, _hash, 'user', data.get('user', ''))
                        state_db.set(state_db.STATE_DB, _hash, 'comment', data.get('comment', ''))

                except json.decoder.JSONDecodeError as je:
                    sonic_logger.log_info(f"Unable to process reload cause file {reboot_file}: {je}")
                    pass

    # Clean up extra files if more than the max limit
    if len(reboot_files) > MAX_HISTORY_FILES:
        for i in range(len(reboot_files)):
            if i >= MAX_HISTORY_FILES:
                reboot_file = reboot_files[i]
                os.remove(reboot_file)

def main():
    # Configure logger to log all messages INFO level and higher
    sonic_logger.set_min_log_priority(sonic_logger.DEFAULT_LOG_LEVEL)

    sonic_logger.log_info("Starting up...")

    if not os.geteuid() == 0:
        sonic_logger.log_error("User {} does not have permission to execute".format(pwd.getpwuid(os.getuid()).pw_name))
        sys.exit("This utility must be run as root")

    # Set a default previous reboot cause
    previous_reboot_cause = REBOOT_CAUSE_UNKNOWN

    # Read the most recent reboot cause file and log data to syslog
    if os.path.exists(PREVIOUS_REBOOT_CAUSE_FILE):
        with open(PREVIOUS_REBOOT_CAUSE_FILE, "r") as last_cause_file:
            data = json.load(last_cause_file)
            if data['user']:
                previous_reboot_cause = USER_ISSUED_REBOOT_CAUSE_REGEX.format(data['cause'], data['user'], data['time'])
            else:
                previous_reboot_cause = "{}".format(data['cause'])

    # Log the last reboot cause to the syslog
    sonic_logger.log_info("Previous reboot cause: {}".format(previous_reboot_cause))

    if os.path.exists(REBOOT_CAUSE_HISTORY_DIR) or device_info.is_smartswitch():
        # Read the previous reboot cause from saved reboot-cause files and save the previous reboot cause upto 10 entry to the state db
        read_reboot_cause_files_and_save_to_db()

if __name__ == "__main__":
    main()
