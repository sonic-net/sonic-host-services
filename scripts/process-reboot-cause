#!/usr/bin/env python3
#
# process-reboot-cause
#
# Program designed to read the previous reboot-cause files, log the last previous reboot-cause.
# And read the saved reboot-cause history files and save the reboot cause in the state-db.
#

try:
    import json
    import os
    import pwd
    import sys

    from swsscommon import swsscommon
    from sonic_py_common import syslogger
    from sonic_py_common import device_info
except ImportError as err:
    raise ImportError("%s - required module not found" % str(err))

VERSION = "1.0"
CHASSIS_SERVER_PORT = 6380

SYSLOG_IDENTIFIER = "process-reboot-cause"

REBOOT_CAUSE_DIR = "/host/reboot-cause/"
REBOOT_CAUSE_HISTORY_DIR = "/host/reboot-cause/history/"
PREVIOUS_REBOOT_CAUSE_FILE = os.path.join(REBOOT_CAUSE_DIR, "previous-reboot-cause.json")
USER_ISSUED_REBOOT_CAUSE_REGEX ="User issued \'{}\' command [User: {}, Time: {}]"

REBOOT_CAUSE_UNKNOWN = "Unknown"
REBOOT_CAUSE_TABLE_NAME = "REBOOT_CAUSE"
MAX_HISTORY_FILES = 10

REDIS_HOSTIP = "127.0.0.1"
state_db = None

# Global logger class instance
sonic_logger = syslogger.SysLogger(SYSLOG_IDENTIFIER)


# ============================= Functions =============================
def read_reboot_cause_files_and_save_to_db():
    """
    Reads reboot cause files and saves them to the appropriate state DB.
    Uses CHASSIS_STATE_DB if the device is a SmartSwitch, otherwise uses STATE_DB.
    """
    is_smartswitch = device_info.is_smartswitch()

    if is_smartswitch:
        # Connect to chassis state DB
        state_db = swsscommon.SonicV2Connector(host="redis_chassis.server", port=CHASSIS_SERVER_PORT)
        state_db.connect(state_db.CHASSIS_STATE_DB)
        dpu_list = device_info.get_dpu_list()
    else:
        # Connect to local state DB
        state_db = swsscommon.SonicV2Connector(host=REDIS_HOSTIP)
        state_db.connect(state_db.STATE_DB)
        dpu_list = [None]  # Placeholder for non-DPU case

    for dpu in dpu_list:
        # Determine file location
        reboot_dir = os.path.join('/host/reboot-cause/module', dpu, 'history') if is_smartswitch else REBOOT_CAUSE_HISTORY_DIR

        # Get sorted reboot cause files
        try:
            reboot_files = sorted(
                [os.path.join(reboot_dir, f) for f in os.listdir(reboot_dir) if f.endswith('.txt')],
                key=os.path.getmtime,
                reverse=True
            )
        except Exception as e:
            sonic_logger.log_error(f"Error retrieving reboot cause files from {reboot_dir}: {e}")
            continue

        for reboot_file in reboot_files[:MAX_HISTORY_FILES]:
            if os.path.isfile(reboot_file):
                with open(reboot_file, "r") as cause_file:
                    try:
                        data = json.load(cause_file)

                        # Formulate hash key
                        if is_smartswitch:
                            if 'name' not in data:
                                sonic_logger.log_warning(f"Missing 'name' in data from {reboot_file}")
                                continue  # Skip
                            _hash = f"{REBOOT_CAUSE_TABLE_NAME}|{dpu.upper()}|{data['name']}"
                        else:
                            _hash = f"{REBOOT_CAUSE_TABLE_NAME}|{data['gen_time']}"

                        # Store data in state DB
                        db_type = state_db.CHASSIS_STATE_DB if is_smartswitch else state_db.STATE_DB
                        state_db.set(db_type, _hash, 'cause', data.get('cause', ''))
                        state_db.set(db_type, _hash, 'time', data.get('time', ''))
                        state_db.set(db_type, _hash, 'user', data.get('user', ''))
                        state_db.set(db_type, _hash, 'comment', data.get('comment', ''))

                    except json.decoder.JSONDecodeError as je:
                        sonic_logger.log_error(f"Unable to process reboot-cause file {reboot_file}: {je}")
                        continue  # Skip

        # Remove excess files
        for reboot_file in reboot_files[MAX_HISTORY_FILES:]:
            os.remove(reboot_file)

def main():
    # Configure logger to log all messages INFO level and higher
    sonic_logger.set_min_log_priority(sonic_logger.DEFAULT_LOG_LEVEL)

    sonic_logger.log_info("Starting up...")

    if not os.geteuid() == 0:
        sonic_logger.log_error("User {} does not have permission to execute".format(pwd.getpwuid(os.getuid()).pw_name))
        sys.exit("This utility must be run as root")

    # Set a default previous reboot cause
    previous_reboot_cause = REBOOT_CAUSE_UNKNOWN

    # Read the most recent reboot cause file and log data to syslog
    if os.path.exists(PREVIOUS_REBOOT_CAUSE_FILE):
        with open(PREVIOUS_REBOOT_CAUSE_FILE, "r") as last_cause_file:
            data = json.load(last_cause_file)
            if data['user']:
                previous_reboot_cause = USER_ISSUED_REBOOT_CAUSE_REGEX.format(data['cause'], data['user'], data['time'])
            else:
                previous_reboot_cause = "{}".format(data['cause'])

    # Log the last reboot cause to the syslog
    sonic_logger.log_info("Previous reboot cause: {}".format(previous_reboot_cause))

    if os.path.exists(REBOOT_CAUSE_HISTORY_DIR) or device_info.is_smartswitch():
        # Read the previous reboot cause from saved reboot-cause files and save the previous reboot cause upto 10 entry to the state db
        read_reboot_cause_files_and_save_to_db()

if __name__ == "__main__":
    main()
